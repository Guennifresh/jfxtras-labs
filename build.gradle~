apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'signing'
//apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'eclipse'
apply plugin: 'idea'

// Needed until Gradle supports class-scanning for Java 8
tasks.withType(Test) {
    scanForTestClasses = false
    include "**/*Test.class"
    include "**/*Test1.class"
}

configurations {
    asciidoclet
}

buildscript {
    
    repositories {
		mavenLocal()
        mavenCentral()
		maven { url "http://oss.sonatype.org/content/repositories/releases/" }
        maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
        
		dependencies {
			classpath "eu.mihosoft.vrl.vlicense-header-util:VLicenseHeaderUtil:0.1-r2-SNAPSHOT"
			classpath "eu.mihosoft.vrl.vlicense-header-util.gradle:vlicense-header-plugin:0.1-r2-SNAPSHOT"
			classpath 'me.tatarka:gradle-retrolambda:3.2.2'
		}
    }
}

// apply vrl license header plugin
if (!project.plugins.findPlugin(eu.mihosoft.vrl.vlicenseheaderutil.gradle.VLicenseHeaderPlugin)) {
    project.apply(plugin: eu.mihosoft.vrl.vlicenseheaderutil.gradle.VLicenseHeaderPlugin)
}

repositories {
	maven { url "http://oss.sonatype.org/content/repositories/releases/" }
    maven { url "http://oss.sonatype.org/content/repositories/snapshots/" }
	mavenLocal()
    mavenCentral()
}


dependencies {
    compile "org.jfxtras:jfxtras-controls:${project.version}"
    compile "org.jfxtras:jfxtras-agenda:${project.version}"
    testCompile  "junit:junit:${jfxtras_junitVersion}","org.mockito:mockito-all:1.9.5"
    testCompile  "org.loadui:testFx:3.1.2"
    testCompile "org.jfxtras:jfxtras-test-support:${project.version}"
	asciidoclet 'org.asciidoctor:asciidoclet:1.5.2'
}

javadoc {
    options.docletpath = configurations.asciidoclet.files.asType(List)
    options.doclet = 'org.asciidoctor.Asciidoclet'
}

apply {
    from 'gradle/mavenCentralDeploy.gradle'
}

// license template (will be used as header in all Java source files)
repairHeaders.licenseHeaderText = new File(projectDir,"license-template.txt")

task buildTimestamped(type: Copy, dependsOn: 'build') {
    from 'build/libs'
    into 'build/libs/timestamped'
    include '*.jar'
    rename { String fileName ->
        fileName.replace('SNAPSHOT', "SNAPSHOT-${new Date().format('HH-mm-dd-MM-yyyy')}")
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.10'
}

test {
  // the ANT plugin Gradle is using runs any class ending on *Test as a test
  exclude 'jfxtras/labs/test/JFXtrasGuiTest.class'
}

signArchives.onlyIf {
    project.hasProperty('signing.keyId')
}

uploadArchives.onlyIf {
    project.hasProperty('sonatypeUsername') && project.hasProperty('sonatypePassword')
}

task copyToLib(type: Copy) {
    into "_lib"
    from configurations.testCompile
}
